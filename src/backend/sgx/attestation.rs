// SPDX-License-Identifier: Apache-2.0

// Credit to: https://github.com/fortanix/rust-sgx/tree/master/aesm-client
// for examples of AESM Requests.

use crate::protobuf::aesm_proto::{
    Request, Request_InitQuoteRequest, Response, Response_InitQuoteResponse,
};
use crate::syscall::{SGX_DUMMY_QUOTE, SGX_DUMMY_TI, SGX_QUOTE_SIZE, SGX_TI_SIZE};

use std::io::{Error, ErrorKind, Read, Write};
use std::mem::size_of;
use std::os::unix::net::UnixStream;
use std::slice::from_raw_parts_mut;

use protobuf::Message;

const AESM_SOCKET: &str = "/var/run/aesmd/aesm.socket";

/// Fills the Target Info of the QE into the output buffer specified and
/// returns the number of bytes written.
fn get_ti(out_buf: &mut [u8]) -> Result<usize, Error> {
    assert_eq!(out_buf.len(), SGX_TI_SIZE, "Invalid size of output buffer");

    // If unable to connect to the AESM daemon, return dummy value
    let mut stream = match UnixStream::connect(AESM_SOCKET) {
        Ok(s) => s,
        Err(_) => {
            out_buf.copy_from_slice(&SGX_DUMMY_TI);
            return Ok(SGX_TI_SIZE);
        }
    };

    // Set an Init Quote Request
    let mut req = Request::new();
    let mut msg = Request_InitQuoteRequest::new();
    msg.set_timeout(1_000_000);
    req.set_initQuoteReq(msg);

    // Set up Writer
    let mut buf_wrtr = vec![0u8; size_of::<u32>()];
    match req.write_to_writer(&mut buf_wrtr) {
        Ok(_) => {}
        Err(e) => {
            return Err(Error::new(
                ErrorKind::InvalidInput,
                format!("Invalid Init Quote Request: {:#?}", e),
            ));
        }
    }

    let req_len = (buf_wrtr.len() - size_of::<u32>()) as u32;
    (&mut buf_wrtr[0..size_of::<u32>()]).copy_from_slice(&req_len.to_le_bytes());

    // Send Request to AESM daemon
    stream.write_all(&buf_wrtr)?;
    stream.flush()?;

    // Receive Response
    let mut res_len_bytes = [0u8; 4];
    stream.read_exact(&mut res_len_bytes)?;
    let res_len = u32::from_le_bytes(res_len_bytes);

    let mut res_bytes = vec![0; res_len as usize];
    stream.read_exact(&mut res_bytes)?;

    // Parse Response and extract TargetInfo
    let mut pb_msg: Response = protobuf::parse_from_bytes(&res_bytes)?;
    let res: Response_InitQuoteResponse = pb_msg.take_initQuoteRes();
    let ti = res.get_targetInfo();

    assert_eq!(
        ti.len(),
        out_buf.len(),
        "Unable to copy TargetInfo to buffer"
    );

    out_buf.copy_from_slice(ti);
    Ok(ti.len())
}

/// Fills the Quote obtained from the AESMD for the Report specified into
/// the output buffer specified and returns the number of bytes written.
// TODO: Replace synthetic Quote with real Quote.
fn get_quote(_report: &[u8], out_buf: &mut [u8]) -> usize {
    assert_eq!(
        out_buf.len(),
        SGX_QUOTE_SIZE,
        "Invalid size of output buffer"
    );
    out_buf.copy_from_slice(&SGX_DUMMY_QUOTE);
    SGX_QUOTE_SIZE
}

/// Returns the number of bytes written to the output buffer. Depending on
/// whether the specified nonce is NULL, the output buffer will be filled with the
/// Target Info for the QE, or a Quote verifying a Report.
pub fn get_attestation(
    nonce: usize,
    _nonce_len: usize,
    buf: usize,
    buf_len: usize,
) -> Result<usize, Error> {
    let out_buf: &mut [u8] = unsafe { from_raw_parts_mut(buf as *mut u8, buf_len) };

    if nonce == 0 {
        get_ti(out_buf)
    } else {
        let tmp_report = [0u8; 512];
        Ok(get_quote(&tmp_report, out_buf))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    const REPORT_SIZE: usize = 432;

    // These values were generated by the QE in its TargetInfo.
    const EXPECTED_MRENCLAVE: [u8; 32] = [
        0xb2, 0xc1, 0xfe, 0x35, 0x7d, 0x7b, 0x10, 0x20, 0x54, 0x4f, 0xac, 0x33, 0x64, 0xc3, 0xf9,
        0xb8, 0x98, 0xc1, 0x75, 0x8d, 0xb4, 0x1, 0x1e, 0x9d, 0x65, 0x2e, 0x40, 0xec, 0xd1, 0x86,
        0x14, 0xbc,
    ];

    #[test]
    fn req_ti() {
        let output = [1u8; SGX_TI_SIZE];
        assert_eq!(
            get_attestation(0, 0, output.as_ptr() as usize, output.len()).unwrap(),
            SGX_TI_SIZE
        );
        assert!(output[0..32].eq(&EXPECTED_MRENCLAVE) || output.eq(&SGX_DUMMY_TI));
    }

    #[test]
    fn req_quote() {
        let input = [1u8; REPORT_SIZE];
        let output = [1u8; SGX_QUOTE_SIZE];
        assert_eq!(
            get_attestation(
                input.as_ptr() as usize,
                input.len(),
                output.as_ptr() as usize,
                output.len()
            )
            .unwrap(),
            SGX_QUOTE_SIZE
        );
        assert_eq!(output, SGX_DUMMY_QUOTE);
    }
}
